# If we are presented with the first k terms of a sequence it is impossible to say with certainty the value of the next term, 
# as there are infinitely many polynomial functions that can model the sequence.

# As an example, let us consider the sequence of cube numbers. This is defined by the generating function, 
# un = n^3: 1, 8, 27, 64, 125, 216, ...

# Suppose we were only given the first two terms of this sequence. Working on the principle that "simple is best",
# we should assume a linear relationship and predict the next term to be 15 (common difference 7). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.

# We shall define OP(k, n) to be the nth term of the optimum polynomial generating function for the first k terms of a sequence. 
# It should be clear that OP(k, n) will accurately generate the terms of the sequence for n ≤ k, and potentially the first incorrect term 
# (FIT) will be OP(k, k+1); in which case we shall call it a bad OP (BOP).

# As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for n ≥ 2, OP(1, n) = u1.

# Hence we obtain the following OPs for the cubic sequence:

# OP(1, n) = 1	1, 1, 1, 1, ...
# OP(2, n) = 7n−6	1, 8, 15, ...
# OP(3, n) = 6n^2−11n+6     	1, 8, 27, 58, ...
# OP(4, n) = n^3	1, 8, 27, 64, 125, ...
# Clearly no BOPs exist for k ≥ 4.

# By considering the sum of FITs generated by the BOPs (indicated in red above), we obtain 1 + 15 + 58 = 74.

# Consider the following tenth degree polynomial generating function:

# un = 1 − n + n^2 − n^3 + n^4 − n^5 + n^6 − n^7 + n^8 − n^9 + n^10

# Find the sum of FITs for the BOPs.



# This problem has one annoying step: Finding the optimal "bad" polynomials of all degrees below 10 for the sequence.
# It's easy to break these down to a system of equations (as in the following quadratic example):
# https://www.futurelearn.com/courses/maths-linear-quadratic-relations/0/steps/12130

# But how does one go about solving these systems of equations in code?
# One uses numpy, it turns out -- I'll take it.


def generate(n):
	return 1 - n + n**2 - n**3 + n**4 - n **5 + n**6 - n**7 + n**8 - n**9 + n**10

sequence = []
for n in range(1, 11):
	sequence.append(generate(n))

# print(sequence)

# def bad_op(seq, degree):
# 	matches = seq[1:degree + 2]

# ...going to stop here, since this seems a little too long and awkward for an Euler problem.
# Is there some more efficient way to generate bad sequences, or generate "bad guesses" directly?

# Well, what happens when we try to build a good lower-degree sequence?

# For a linear, first-degree sequence, we assume the difference is the same each time.
# This means that our FIT will always = (last term) + (difference between terms), as with 8 + 7 = 15
# For a quadratic, second-degree sequence, we assume the difference is changing by a set amount each time.
# So we look at 1, 8, 27, then assume that the difference starts at 7 and increases by 12 each time.
# The difference between 8 and 27 is 19, so we add 27 + 19 + 12 = 58.
# For a cubic, third-degree sequence, we do the same thing, but one level up -- that is
# we assume that the difference between differences is increasing consistently.
# So if we were looking at a n^4 sequence (1, 16, 81, 256),
# we'd see differences of 15, 65, and 175. So we'd assume that the increase itself was growing by 60 each time.
# And our FIT would be 256 + 175 + 120 + 70...

# There's a way to write this out on paper with a pyramid of numbers, e.g.
#     12
#   7   19
# 1   8   27

# This has the neat property that 7+8 = 15, 12+19+27 = 58, and the next "layer" to the right will add up to the next FIT
# (Each number on the bottom is the "basis" for one FIT, with the numbers above it being the numbers we add to fulfill our false pattern)
# So the sum of all the numbers in the pyramid is equal to the sum of all the FITs

def differences(seq):
	return [seq[i] - seq[i - 1] for i in range(1, len(seq))]
	# This syntax lets us return a list of differences

# print(differences(sequence))	

# seq = [1, 8, 27]
seq = sequence
total, diffs = 0, seq

while len(diffs) > 0: # Make sure to add the single number at the top of the pyramid
	seq = diffs
	total += sum(diffs)
	diffs = differences(seq)

print("Sum of FITs:", total)


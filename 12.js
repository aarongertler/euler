// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?


var triangle = function(n) {
	return (n+1)*(n/2)
}

// console.log(triangle(10))

var numDivisors = function(n) {
	var num = 2    // all numbers have at least two divisors (one and themselves)
	var sqrt = Math.sqrt(n) // We can stop looking once we hit the square root of n
	for(i = 2; i <= sqrt; i++) {
		if(n % i === 0) {
			num += 2 // for each divisor < sqrt, there is a divisor > sqrt
		}
	}
	if(sqrt % 1 === 0) {
		num--    // don't double-count the square root as a divisor for square numbers
	}
	return num;
}

var tri = 0
var divs = 0

while(divs <= 500) {
	tri++
	divs = numDivisors(triangle(tri))
} 
console.log(tri);
console.log(divs);
console.log(triangle(tri));


// Takes about a second to do 500, 10 seconds to do 1000
// Ways to make this faster: Not much, really (nothing JS-relevant pops up in Euler)
